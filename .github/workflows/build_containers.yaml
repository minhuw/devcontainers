name: "Release Container"
on:
    workflow_dispatch:
    push:
        branches:
          - 'master'
        paths:
          - containers/**
          - .github/workflows/build_containers.yaml

env:
    REGISTRY: ghcr.io

jobs:
    detect-changes:
        runs-on: ubuntu-latest
        outputs:
            matrix: ${{ steps.changes.outputs.matrix }}
        steps:
          - name: Checkout repository
            uses: actions/checkout@v3
            with:
                fetch-depth: 0

          - name: Detect changed containers
            id: changes
            run: |
                # Build container list
                ALL_CONTAINERS=""
                while IFS= read -r dockerfile; do
                    container_path=$(dirname "$dockerfile")
                    container_name=$(basename "$container_path")

                    # Skip .devcontainer Dockerfiles
                    [[ "$dockerfile" == *"/.devcontainer/"* ]] && continue

                    # Generate image name and validation setting
                    image_name="ghcr.io/${{ github.actor }}/${container_name}"
                    validate="true"
                    [[ "$container_name" == "caddy" ]] && validate="false"

                    ALL_CONTAINERS+="$container_path:$dockerfile:$image_name:$validate"$'\n'
                done < <(find containers -name "Dockerfile" -type f)

                # Get changed paths
                if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
                    BUILD_LIST="$ALL_CONTAINERS"
                    echo "Manual dispatch: building all containers"
                else
                    # Check if we have valid git refs
                    if [ -z "${{ github.event.before }}" ] || ! git cat-file -e "${{ github.event.before }}" 2>/dev/null; then
                        echo "Invalid or missing before ref, building all containers"
                        BUILD_LIST="$ALL_CONTAINERS"
                    else
                        CHANGED_FILES=$(git diff --name-only "${{ github.event.before }}" "${{ github.sha }}")
                        NEW_DOCKERFILES=$(git diff --name-only --diff-filter=A "${{ github.event.before }}" "${{ github.sha }}" | grep "containers/.*/Dockerfile$" || true)

                        CHANGED_PATHS=$(echo "$CHANGED_FILES" | grep "^containers/" | cut -d'/' -f1-2 | sort -u || true)
                        NEW_PATHS=$(echo "$NEW_DOCKERFILES" | xargs -I {} dirname {} | sort -u 2>/dev/null || true)

                        ALL_CHANGED_PATHS=$(echo -e "$CHANGED_PATHS\n$NEW_PATHS" | sort -u | grep -v '^$' || true)

                        # Filter builds to only changed containers
                        BUILD_LIST=""
                        for path in $ALL_CHANGED_PATHS; do
                            BUILD_LIST+=$(echo "$ALL_CONTAINERS" | grep "^$path:" || true)
                            BUILD_LIST+=$'\n'
                        done

                        if [ -n "$NEW_DOCKERFILES" ]; then
                            echo "New Dockerfiles detected: $NEW_DOCKERFILES"
                        fi

                        # If no changes detected, build all
                        if [ -z "$BUILD_LIST" ] || [ "$BUILD_LIST" = $'\n' ]; then
                            echo "No valid changes detected, building all containers"
                            BUILD_LIST="$ALL_CONTAINERS"
                        fi
                    fi
                fi

                # Build JSON matrix
                MATRIX="["
                FIRST=true
                while IFS=':' read -r container_path dockerfile image validate; do
                    [[ -z "$container_path" ]] && continue
                    if [ "$FIRST" = "true" ]; then
                        FIRST=false
                    else
                        MATRIX+=","
                    fi
                    MATRIX+="{\"dockerfile\":\"$dockerfile\",\"image\":\"$image\",\"validate_image\":$validate}"
                done <<< "$BUILD_LIST"
                MATRIX+="]"

                echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
                echo "Building: $(echo "$BUILD_LIST" | cut -d':' -f1 | tr '\n' ' ')"

    build-and-push-image:
        needs: detect-changes
        runs-on: ubuntu-latest
        if: needs.detect-changes.outputs.matrix != '[]'
        strategy:
            fail-fast: false
            matrix:
              include: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
        permissions:
            contents: read
            packages: write
        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Log in to the Container registry
              uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
              with:
                  registry: ${{ env.REGISTRY }}
                  username: ${{ github.actor }}
                  password: ${{ secrets.GITHUB_TOKEN }}

            - name: Extract metadata (tags, labels) for Docker
              id: meta
              uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
              with:
                  images: ${{ matrix.image }}
            
            - name: Build and push Docker image
              uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
              with:
                context: .
                file: ${{ matrix.dockerfile }}
                push: true
                tags: ${{ steps.meta.outputs.tags }}
                labels: ${{ steps.meta.outputs.labels }}

            - name: Analyze Docker image
              run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock --env CI=true wagoodman/dive:latest ${{ steps.meta.outputs.tags }}
              if: ${{ matrix.validate_image }}
